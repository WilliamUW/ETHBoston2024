{
  "address": "0x2D7D2B5fb66D414aD5dac757361139f230A92D4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_rwaCollateralAgreementHash",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CollateralLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CollateralReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "agreementHash",
          "type": "string"
        }
      ],
      "name": "RWACollateralAgreementAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rwaCollateralAgreementHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        }
      ],
      "name": "updateLoanAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanDuration",
          "type": "uint256"
        }
      ],
      "name": "updateLoanDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38b98d5e7368f1d2e94b9205e309e88d8a3b60aecbd062247d98200ebcab8777",
  "receipt": {
    "to": null,
    "from": "0xe48d6Ca9eca86620682133B311c6B03838e276B8",
    "contractAddress": "0x2D7D2B5fb66D414aD5dac757361139f230A92D4c",
    "transactionIndex": 0,
    "gasUsed": "848350",
    "logsBloom": "0x
    "blockHash": "0xdb9447c0f6cdaa4ee18fb1b181b88d2bd9f070f3fac1e1409526c4756cd33ddd",
    "transactionHash": "0x38b98d5e7368f1d2e94b9205e309e88d8a3b60aecbd062247d98200ebcab8777",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1611210,
        "transactionHash": "0x38b98d5e7368f1d2e94b9205e309e88d8a3b60aecbd062247d98200ebcab8777",
        "address": "0x2D7D2B5fb66D414aD5dac757361139f230A92D4c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e48d6ca9eca86620682133b311c6b03838e276b8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdb9447c0f6cdaa4ee18fb1b181b88d2bd9f070f3fac1e1409526c4756cd33ddd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1611210,
        "transactionHash": "0x38b98d5e7368f1d2e94b9205e309e88d8a3b60aecbd062247d98200ebcab8777",
        "address": "0x2D7D2B5fb66D414aD5dac757361139f230A92D4c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e48d6ca9eca86620682133b311c6b03838e276b8",
          "0x000000000000000000000000e48d6ca9eca86620682133b311c6b03838e276b8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdb9447c0f6cdaa4ee18fb1b181b88d2bd9f070f3fac1e1409526c4756cd33ddd"
      }
    ],
    "blockNumber": 1611210,
    "cumulativeGasUsed": "848350",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe48d6Ca9eca86620682133B311c6B03838e276B8",
    "1000000000000000000",
    500,
    2592000,
    "0xb3b206c9e6761e8bca64b4682089d0f1a8f3a12bfa731a6c06f2dfa5783a4cde"
  ],
  "numDeployments": 3,
  "solcInputHash": "81a8a055a8f3615b6d5d69531bdb825d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_rwaCollateralAgreementHash\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CollateralLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CollateralReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agreementHash\",\"type\":\"string\"}],\"name\":\"RWACollateralAgreementAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwaCollateralAgreementHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"}],\"name\":\"updateLoanAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanDuration\",\"type\":\"uint256\"}],\"name\":\"updateLoanDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mehdi R. \",\"details\":\"The contract allows to deposit RWA collateral agreement signed via ETHSign\",\"kind\":\"dev\",\"methods\":{\"lockCollateral(address,uint256)\":{\"params\":{\"_tokenId\":\"- the tokenId of the NFT\",\"nftAddress\":\"- the address of the NFT\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SignedNFTAgreement \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Receives NFTs as collateral for a loan and releases them when the loan is repaid \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignedNFTAgreement.sol\":\"SignedNFTAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SignedNFTAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/// @title SignedNFTAgreement \\n/// @author Mehdi R. \\n/// @notice Receives NFTs as collateral for a loan and releases them when the loan is repaid \\n/// @dev The contract allows to deposit RWA collateral agreement signed via ETHSign\\ncontract SignedNFTAgreement is ERC721Holder, ReentrancyGuard, Ownable {\\n    // Parties invovled details \\n    address payable sender; \\n    address payable buyer; \\n    \\n    // NFT collateral details\\n    address public nftAddress;\\n    uint256 public tokenId;\\n    bool public isLocked;\\n\\n    // Optional RWA collateral agreement signed via ETHSign\\n    string public rwaCollateralAgreementHash;\\n\\n    // Loan conditions specified at deployment\\n    uint256 public loanAmount;\\n    uint256 public interestRate; // in basis points to allow decimals\\n    uint256 public loanDuration; // in seconds\\n\\n    // Events for locking and releasing NFTs\\n    event CollateralLocked(address indexed nftAddress, uint256 indexed tokenId);\\n    event CollateralReleased(address indexed nftAddress, uint256 indexed tokenId);\\n    event RWACollateralAgreementAdded(string agreementHash);\\n\\n    constructor(\\n        address newOwner,\\n        uint256 _loanAmount,\\n        uint256 _interestRate,\\n        uint256 _loanDuration,\\n        string memory _rwaCollateralAgreementHash\\n    )  Ownable() {\\n        loanAmount = _loanAmount;\\n        interestRate = _interestRate;\\n        loanDuration = _loanDuration;\\n        rwaCollateralAgreementHash = _rwaCollateralAgreementHash;\\n        transferOwnership(newOwner);\\n    }\\n\\n    // Function to udpdate loan amout \\n    function updateLoanAmount(uint256 _loanAmount) external onlyOwner {\\n        loanAmount = _loanAmount;\\n    }\\n\\n    // Function to update interest rate\\n    function updateInterestRate(uint256 _interestRate) external onlyOwner {\\n        interestRate = _interestRate;\\n    }\\n\\n    // Function to update loan duration\\n    function updateLoanDuration(uint256 _loanDuration) external onlyOwner {\\n        loanDuration = _loanDuration;\\n    }\\n\\n    // Function to lock collateral\\n    ///@param nftAddress - the address of the NFT\\n    ///@param _tokenId - the tokenId of the NFT\\n    function lockCollateral(address nftAddress, uint256 _tokenId) external nonReentrant onlyOwner {  //@audit - \\n        require(!isLocked, \\\"NFT is already locked as collateral\\\"); //@audit - NFT should not be used as collateral \\n        IERC721 nft = IERC721(nftAddress); \\n        require(nft.ownerOf(_tokenId) == owner(), \\\"Contract owner does not own the NFT\\\"); \\n\\n        nft.safeTransferFrom(owner(), address(this), tokenId);\\n        isLocked = true;\\n\\n        emit CollateralLocked(nftAddress, tokenId);\\n    }\\n\\n    // Function to release collateral\\n    function releaseCollateral() external nonReentrant onlyOwner {\\n        require(isLocked, \\\"NFT is not locked as collateral\\\");\\n\\n        IERC721 nft = IERC721(nftAddress);\\n        nft.safeTransferFrom(address(this), owner(), tokenId);\\n        isLocked = false;\\n\\n        emit CollateralReleased(nftAddress, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x36bee803af2998ef73bafa5ea95194e7f5d88f3dc85e9d947e855c6f3a206286\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000e9a38038062000e9a8339810160408190526200003491620001c1565b6001600055620000443362000078565b60088490556009839055600a829055600762000061828262000364565b506200006d85620000ca565b505050505062000430565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000d46200014d565b6001600160a01b0381166200013f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200014a8162000078565b50565b6001546001600160a01b03163314620001a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000136565b565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215620001da57600080fd5b85516001600160a01b0381168114620001f257600080fd5b602087810151604089015160608a015160808b015194995091975095509350906001600160401b03808211156200022857600080fd5b818901915089601f8301126200023d57600080fd5b815181811115620002525762000252620001ab565b604051601f8201601f19908116603f011681019083821181831017156200027d576200027d620001ab565b816040528281528c868487010111156200029657600080fd5b600093505b82841015620002ba57848401860151818501870152928501926200029b565b60008684830101528096505050505050509295509295909350565b600181811c90821680620002ea57607f821691505b6020821081036200030b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200035f57600081815260208120601f850160051c810160208610156200033a5750805b601f850160051c820191505b818110156200035b5782815560010162000346565b5050505b505050565b81516001600160401b03811115620003805762000380620001ab565b6200039881620003918454620002d5565b8462000311565b602080601f831160018114620003d05760008415620003b75750858301515b600019600386901b1c1916600185901b1785556200035b565b600085815260208120601f198616915b828110156200040157888601518255948401946001909101908401620003e0565b5085821015620004205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610a5a80620004406000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637c3a00fd11610097578063ba43a92211610066578063ba43a9221461020e578063eb75cad514610221578063f2fde38b14610236578063f5521bf11461024957600080fd5b80637c3a00fd146101ce5780638da5cb5b146101d75780639d585f7f146101e8578063a4e2d634146101f157600080fd5b80635bf8633a116100d35780635bf8633a146101805780636665b621146101ab578063715018a6146101b3578063752a50a6146101bb57600080fd5b8063150b7a021461010557806317d70f7c1461014157806347a7d107146101585780634c6de5c91461016d575b600080fd5b610123610113366004610836565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61014a60055481565b604051908152602001610138565b61016b610166366004610916565b610252565b005b61016b61017b366004610942565b610483565b600454610193906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b61016b610490565b61016b6105d3565b61016b6101c9366004610942565b6105e5565b61014a60095481565b6001546001600160a01b0316610193565b61014a60085481565b6006546101fe9060ff1681565b6040519015158152602001610138565b61016b61021c366004610942565b6105f2565b6102296105ff565b604051610138919061095b565b61016b6102443660046109a9565b61068d565b61014a600a5481565b61025a610706565b61026261075f565b60065460ff16156102c65760405162461bcd60e51b815260206004820152602360248201527f4e465420697320616c7265616479206c6f636b656420617320636f6c6c6174656044820152621c985b60ea1b60648201526084015b60405180910390fd5b816102d96001546001600160a01b031690565b6040516331a9108f60e11b8152600481018490526001600160a01b0391821691831690636352211e90602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034691906109cd565b6001600160a01b0316146103a85760405162461bcd60e51b815260206004820152602360248201527f436f6e7472616374206f776e657220646f6573206e6f74206f776e207468652060448201526213919560ea1b60648201526084016102bd565b806001600160a01b03166342842e0e6103c96001546001600160a01b031690565b6005546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301523060248301526044820152606401600060405180830381600087803b15801561041857600080fd5b505af115801561042c573d6000803e3d6000fd5b50506006805460ff1916600117905550506005546040516001600160a01b038516907f2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd080090600090a35061047f6001600055565b5050565b61048b61075f565b600855565b610498610706565b6104a061075f565b60065460ff166104f25760405162461bcd60e51b815260206004820152601f60248201527f4e4654206973206e6f74206c6f636b656420617320636f6c6c61746572616c0060448201526064016102bd565b6004546001600160a01b0316806342842e0e306105176001546001600160a01b031690565b6005546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b50506006805460ff1916905550506005546004546040516001600160a01b03909116907f15192ee5c95e01de0681c61d6cbfa4b8d1e4c160294017332eb7d6e5c4ea38b790600090a3506105d16001600055565b565b6105db61075f565b6105d160006107b9565b6105ed61075f565b600955565b6105fa61075f565b600a55565b6007805461060c906109ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610638906109ea565b80156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b505050505081565b61069561075f565b6001600160a01b0381166106fa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b610703816107b9565b50565b6002600054036107585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102bd565b6002600055565b6001546001600160a01b031633146105d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bd565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116811461070357600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561084c57600080fd5b84356108578161080b565b935060208501356108678161080b565b925060408501359150606085013567ffffffffffffffff8082111561088b57600080fd5b818701915087601f83011261089f57600080fd5b8135818111156108b1576108b1610820565b604051601f8201601f19908116603f011681019083821181831017156108d9576108d9610820565b816040528281528a60208487010111156108f257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561092957600080fd5b82356109348161080b565b946020939093013593505050565b60006020828403121561095457600080fd5b5035919050565b600060208083528351808285015260005b818110156109885785810183015185820160400152820161096c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109bb57600080fd5b81356109c68161080b565b9392505050565b6000602082840312156109df57600080fd5b81516109c68161080b565b600181811c908216806109fe57607f821691505b602082108103610a1e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122051e4895a2cdc3db459a511ecf63244a6761302d65e9cc55ffe7690222189ddba64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637c3a00fd11610097578063ba43a92211610066578063ba43a9221461020e578063eb75cad514610221578063f2fde38b14610236578063f5521bf11461024957600080fd5b80637c3a00fd146101ce5780638da5cb5b146101d75780639d585f7f146101e8578063a4e2d634146101f157600080fd5b80635bf8633a116100d35780635bf8633a146101805780636665b621146101ab578063715018a6146101b3578063752a50a6146101bb57600080fd5b8063150b7a021461010557806317d70f7c1461014157806347a7d107146101585780634c6de5c91461016d575b600080fd5b610123610113366004610836565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61014a60055481565b604051908152602001610138565b61016b610166366004610916565b610252565b005b61016b61017b366004610942565b610483565b600454610193906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b61016b610490565b61016b6105d3565b61016b6101c9366004610942565b6105e5565b61014a60095481565b6001546001600160a01b0316610193565b61014a60085481565b6006546101fe9060ff1681565b6040519015158152602001610138565b61016b61021c366004610942565b6105f2565b6102296105ff565b604051610138919061095b565b61016b6102443660046109a9565b61068d565b61014a600a5481565b61025a610706565b61026261075f565b60065460ff16156102c65760405162461bcd60e51b815260206004820152602360248201527f4e465420697320616c7265616479206c6f636b656420617320636f6c6c6174656044820152621c985b60ea1b60648201526084015b60405180910390fd5b816102d96001546001600160a01b031690565b6040516331a9108f60e11b8152600481018490526001600160a01b0391821691831690636352211e90602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034691906109cd565b6001600160a01b0316146103a85760405162461bcd60e51b815260206004820152602360248201527f436f6e7472616374206f776e657220646f6573206e6f74206f776e207468652060448201526213919560ea1b60648201526084016102bd565b806001600160a01b03166342842e0e6103c96001546001600160a01b031690565b6005546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301523060248301526044820152606401600060405180830381600087803b15801561041857600080fd5b505af115801561042c573d6000803e3d6000fd5b50506006805460ff1916600117905550506005546040516001600160a01b038516907f2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd080090600090a35061047f6001600055565b5050565b61048b61075f565b600855565b610498610706565b6104a061075f565b60065460ff166104f25760405162461bcd60e51b815260206004820152601f60248201527f4e4654206973206e6f74206c6f636b656420617320636f6c6c61746572616c0060448201526064016102bd565b6004546001600160a01b0316806342842e0e306105176001546001600160a01b031690565b6005546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b50506006805460ff1916905550506005546004546040516001600160a01b03909116907f15192ee5c95e01de0681c61d6cbfa4b8d1e4c160294017332eb7d6e5c4ea38b790600090a3506105d16001600055565b565b6105db61075f565b6105d160006107b9565b6105ed61075f565b600955565b6105fa61075f565b600a55565b6007805461060c906109ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610638906109ea565b80156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b505050505081565b61069561075f565b6001600160a01b0381166106fa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b610703816107b9565b50565b6002600054036107585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102bd565b6002600055565b6001546001600160a01b031633146105d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bd565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116811461070357600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561084c57600080fd5b84356108578161080b565b935060208501356108678161080b565b925060408501359150606085013567ffffffffffffffff8082111561088b57600080fd5b818701915087601f83011261089f57600080fd5b8135818111156108b1576108b1610820565b604051601f8201601f19908116603f011681019083821181831017156108d9576108d9610820565b816040528281528a60208487010111156108f257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561092957600080fd5b82356109348161080b565b946020939093013593505050565b60006020828403121561095457600080fd5b5035919050565b600060208083528351808285015260005b818110156109885785810183015185820160400152820161096c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109bb57600080fd5b81356109c68161080b565b9392505050565b6000602082840312156109df57600080fd5b81516109c68161080b565b600181811c908216806109fe57607f821691505b602082108103610a1e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122051e4895a2cdc3db459a511ecf63244a6761302d65e9cc55ffe7690222189ddba64736f6c63430008110033",
  "devdoc": {
    "author": "Mehdi R. ",
    "details": "The contract allows to deposit RWA collateral agreement signed via ETHSign",
    "kind": "dev",
    "methods": {
      "lockCollateral(address,uint256)": {
        "params": {
          "_tokenId": "- the tokenId of the NFT",
          "nftAddress": "- the address of the NFT"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SignedNFTAgreement ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Receives NFTs as collateral for a loan and releases them when the loan is repaid ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 395,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "sender",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 397,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "buyer",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 399,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "nftAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 401,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "tokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 403,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "isLocked",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 405,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "rwaCollateralAgreementHash",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 407,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "loanAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 409,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "interestRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 411,
        "contract": "contracts/SignedNFTAgreement.sol:SignedNFTAgreement",
        "label": "loanDuration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}